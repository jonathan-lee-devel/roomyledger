// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.1
// source: proto/payments.proto

/* eslint-disable */
import {GrpcMethod, GrpcStreamMethod} from '@nestjs/microservices';
import {Observable} from 'rxjs';

export const protobufPackage = 'payments';

export interface GetPaymentStatusForUserIdDto {
  id: string;
}

export interface GetPaymentStatusForEmailDto {
  email: string;
}

export interface PaymentsStatusDto {
  id: string;
  email: string;
  status: string;
}

export const PAYMENTS_PACKAGE_NAME = 'payments';

export interface PaymentsServiceClient {
  getPaymentStatusForUserId(
    request: GetPaymentStatusForUserIdDto,
  ): Observable<PaymentsStatusDto>;

  getPaymentStatusForEmail(
    request: GetPaymentStatusForEmailDto,
  ): Observable<PaymentsStatusDto>;
}

export interface PaymentsServiceController {
  getPaymentStatusForUserId(
    request: GetPaymentStatusForUserIdDto,
  ):
    | Promise<PaymentsStatusDto>
    | Observable<PaymentsStatusDto>
    | PaymentsStatusDto;

  getPaymentStatusForEmail(
    request: GetPaymentStatusForEmailDto,
  ):
    | Promise<PaymentsStatusDto>
    | Observable<PaymentsStatusDto>
    | PaymentsStatusDto;
}

export function PaymentsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'getPaymentStatusForUserId',
      'getPaymentStatusForEmail',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('PaymentsService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('PaymentsService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const PAYMENTS_SERVICE_NAME = 'PaymentsService';
