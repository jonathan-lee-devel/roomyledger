name: Deploy Production

on:
  push:
    branches: [main]

permissions:
  contents: read
  pull-requests: read

jobs:
  lint-backend:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node-version: [ 20.x ]
    name: Lint Backend (v${{ matrix.node-version }})
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
          cache-dependency-path: '**/yarn.lock'
      - run: yarn install --frozen-lockfile
        working-directory: ./web/backend/rl-nestjs-mono
      - name: Lint (v${{ matrix.node-version }})
        working-directory: ./web/backend/rl-nestjs-mono
        run: yarn run lint

  build-backend:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node-version: [ 20.x ]
    name: Build Backend (v${{ matrix.node-version }})
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
          cache-dependency-path: '**/yarn.lock'
      - run: yarn install --frozen-lockfile
        working-directory: ./web/backend/rl-nestjs-mono
      - name: Build (v${{ matrix.node-version }})
        working-directory: ./web/backend/rl-nestjs-mono
        run: yarn run build

  test-backend:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node-version: [ 20.x ]
    name: Test Backend (v${{ matrix.node-version }})
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
          cache-dependency-path: '**/yarn.lock'
      - run: yarn install --frozen-lockfile
        working-directory: ./web/backend/rl-nestjs-mono
      - name: Test (v${{ matrix.node-version }})
        working-directory: ./web/backend/rl-nestjs-mono
        run: yarn run test

  sonarcloud-analysis-backend:
    name: SonarCloud Backend (v${{ matrix.node-version }})
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node-version: [ 20.x ]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
          cache-dependency-path: '**/yarn.lock'
      - name: Install Dependencies
        working-directory: ./web/backend/rl-nestjs-mono
        run: yarn install --frozen-lockfile
      - name: Run Tests
        working-directory: ./web/backend/rl-nestjs-mono
        run: yarn run test:cov
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: web/backend/rl-nestjs-mono
          args: -Dsonar.projectKey=jonathan-lee-devel_roomyledger-rl-nestjs-mono
            -Dsonar.organization=jonathan-lee-devel
            -Dsonar.sources=src
            -Dsonar.tests=src
            -Dsonar.inclusions=**
            -Dsonar.exclusions=**/*.spec.ts,**.module.ts,src/main.ts
            -Dsonar.test.inclusions=src/**/*.spec.ts
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.qualitygate.wait=true

  lint-frontend:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node-version: [ 20.x ]
    name: Lint Frontend (v${{ matrix.node-version }})
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
          cache-dependency-path: '**/yarn.lock'
      - run: yarn install --frozen-lockfile
        working-directory: ./web/frontend/rl-angular-spa
      - name: Lint (v${{ matrix.node-version }})
        working-directory: ./web/frontend/rl-angular-spa
        run: yarn run lint

  build-frontend:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node-version: [ 20.x ]
    name: Build Frontend (v${{ matrix.node-version }})
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
          cache-dependency-path: '**/yarn.lock'
      - run: yarn install --frozen-lockfile
        working-directory: ./web/frontend/rl-angular-spa
      - name: Build Staging (v${{ matrix.node-version }})
        working-directory: ./web/frontend/rl-angular-spa
        run: yarn run build:stage
      - name: Build (v${{ matrix.node-version }})
        working-directory: ./web/frontend/rl-angular-spa
        run: yarn run build

  test-frontend:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node-version: [ 20.x ]
    name: Test Frontend (v${{ matrix.node-version }})
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
          cache-dependency-path: '**/yarn.lock'
      - run: yarn install --frozen-lockfile
        working-directory: ./web/frontend/rl-angular-spa
      - name: Test (v${{ matrix.node-version }})
        working-directory: ./web/frontend/rl-angular-spa
        run: yarn run test

  sonarcloud-analysis-frontend:
    name: SonarCloud Frontend (v${{ matrix.node-version }})
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node-version: [ 20.x ]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
          cache-dependency-path: '**/yarn.lock'
      - name: Install Dependencies
        working-directory: ./web/frontend/rl-angular-spa
        run: yarn install --frozen-lockfile
      - name: Run Tests
        working-directory: ./web/frontend/rl-angular-spa
        run: yarn run test
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: web/frontend/rl-angular-spa
          args: -Dsonar.projectKey=jonathan-lee-devel_roomyledger-rl-angular-spa
            -Dsonar.organization=jonathan-lee-devel
            -Dsonar.sources=src
            -Dsonar.tests=src
            -Dsonar.inclusions=**
            -Dsonar.exclusions=**/*.spec.ts,**.module.ts,src/main.ts
            -Dsonar.test.inclusions=src/**/*.spec.ts
            -Dsonar.javascript.lcov.reportPaths=coverage/roomyledger-ui-spa/lcov.info
            -Dsonar.qualitygate.wait=true

  deploy-railway-production:
    needs: [ lint-backend, lint-frontend, build-backend, build-frontend, test-backend, test-frontend, sonarcloud-analysis-backend, sonarcloud-analysis-frontend ]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use Node 20
        uses: actions/setup-node@v1
        with:
          node-version: 20.x
      - name: Install packages
        run: yarn install --frozen-lockfile
      - name: Install Railway
        run: npm i -g @railway/cli
      - name: Deploy
        run: railway up --service rl-ledger-service
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_PRODUCTION_TOKEN }}

  deploy-vercel-prod:
    needs: [ lint-backend, lint-frontend, build-backend, build-frontend, test-backend, test-frontend, sonarcloud-analysis-backend, sonarcloud-analysis-frontend ]
    runs-on: ubuntu-22.04
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      ENV: prod
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '1'
          ref: main
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

  await-vercel-deployment-prod:
    needs: [deploy-vercel-prod]
    runs-on: ubuntu-22.04
    steps:
      - name: Sleep
        run: sleep 20s
        shell: bash
      - name: Await for Vercel deployment
        uses: UnlyEd/github-action-await-vercel@v2.0
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        with:
          deployment-url: 'www.roomyledger.com'
          timeout: 360
          poll-interval: '10'

  playwright-test:
    needs: [ deploy-railway-production, deploy-vercel-prod, await-vercel-deployment-prod ]
    timeout-minutes: 60
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Install dependencies
        working-directory: ./web/frontend/rl-angular-spa
        run: npm install -g yarn && yarn
      - name: Install Playwright Browsers
        working-directory: ./web/frontend/rl-angular-spa
        run: yarn playwright install --with-deps
      - name: Run Playwright tests
        working-directory: ./web/frontend/rl-angular-spa
        run: yarn playwright test
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: web/frontend/rl-angular-spa/playwright-report/
          retention-days: 30
    env:
      CI: true
      BASE_URL: 'https://www.roomyledger.com'
